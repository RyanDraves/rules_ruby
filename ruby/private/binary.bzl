load("//ruby/private:providers.bzl", "get_transitive_data", "get_transitive_srcs")

COMMON_ATTRS = {
    "srcs": attr.label_list(
        allow_files = [".rb", ".gemspec", "Gemfile", "Gemfile.lock"],
        doc = """
List of Ruby source files used to build the library.
        """,
    ),
    "deps": attr.label_list(
        doc = """
List of other Ruby libraries the target depends on.
        """,
    ),
    "data": attr.label_list(
        allow_files = True,
        doc = """
List of non-Ruby source files used to build the library.
        """,
    ),
    "main": attr.label(
        executable = True,
        allow_single_file = True,
        cfg = "exec",
        doc = """
Ruby script to run. It may also be a binary stub generated by Bundler.
If omitted, it defaults to the Ruby interpreter.

Use a built-in `args` attribute to pass extra arguments to the script.
        """,
    ),
    "env": attr.string_dict(
        doc = """
Environment variables to use during execution.
        """,
    ),
    "env_inherit": attr.string_list(
        doc = """
List of environment variable names to be inherited by the test runner.
        """,
    ),
    "_binary_cmd_tpl": attr.label(
        allow_single_file = True,
        default = "@rules_ruby//ruby/private:binary/binary.cmd.tpl",
    ),
    "_binary_sh_tpl": attr.label(
        allow_single_file = True,
        default = "@rules_ruby//ruby/private:binary/binary.sh.tpl",
    ),
    "_windows_constraint": attr.label(
        default = "@platforms//os:windows",
    ),
}

def generate_rb_binary_script(ctx, binary, args = []):
    windows_constraint = ctx.attr._windows_constraint[platform_common.ConstraintValueInfo]
    is_windows = ctx.target_platform_has_constraint(windows_constraint)
    toolchain = ctx.toolchains["@rules_ruby//ruby:toolchain_type"]
    toolchain_bindir = toolchain.bindir

    if binary:
        binary_path = binary.path
    else:
        binary_path = ""

    if is_windows:
        binary_path = binary_path.replace("/", "\\")
        toolchain_bindir = toolchain_bindir.replace("/", "\\")
        script = ctx.actions.declare_file("{}.rb.cmd".format(ctx.label.name))
        template = ctx.file._binary_cmd_tpl
    else:
        script = ctx.actions.declare_file("{}.rb.sh".format(ctx.label.name))
        template = ctx.file._binary_sh_tpl

    args = " ".join(args)
    args = ctx.expand_location(args)

    ctx.actions.expand_template(
        template = template,
        output = script,
        is_executable = True,
        substitutions = {
            "{args}": args,
            "{binary}": binary_path,
            "{toolchain_bindir}": toolchain_bindir,
        },
    )

    return script

def rb_binary_impl(ctx):
    script = generate_rb_binary_script(ctx, ctx.executable.main)
    transitive_data = get_transitive_data(ctx.files.data, ctx.attr.deps).to_list()
    transitive_srcs = get_transitive_srcs(ctx.files.srcs, ctx.attr.deps).to_list()
    if not ctx.attr.main:
        transitive_srcs.append(ctx.toolchains["@rules_ruby//ruby:toolchain_type"].ruby)
    runfiles = ctx.runfiles(transitive_data + transitive_srcs)

    return [
        DefaultInfo(executable = script, runfiles = runfiles),
        RunEnvironmentInfo(
            environment = ctx.attr.env,
            inherited_environment = ctx.attr.env_inherit,
        ),
    ]

rb_binary = rule(
    implementation = rb_binary_impl,
    executable = True,
    attrs = dict(COMMON_ATTRS),
    toolchains = ["@rules_ruby//ruby:toolchain_type"],
    doc = """
Runs a Ruby binary.

Suppose you have the following Ruby gem, where `rb_library()` is used
in `BUILD` files to define the packages for the gem.

```output
|-- BUILD
|-- Gemfile
|-- WORKSPACE
|-- gem.gemspec
`-- lib
    |-- BUILD
    |-- gem
    |   |-- BUILD
    |   |-- add.rb
    |   |-- subtract.rb
    |   `-- version.rb
    `-- gem.rb
```

One of the files can be run as a Ruby script:

`lib/gem/version.rb`:
```ruby
module GEM
  VERSION = '0.1.0'
end

puts "Version is: #{GEM::VERSION}" if __FILE__ == $PROGRAM_NAME
```

You can run this script by defining a target:

`lib/gem/BUILD`:
```bazel
load("@rules_ruby//ruby:defs.bzl", "rb_binary", "rb_library")

rb_library(
    name = "version",
    srcs = ["version.rb"],
)

rb_binary(
    name = "print-version",
    args = ["lib/gem/version.rb"],
    deps = [":version"],
)
```

```output
$ bazel run lib/gem:print-version
INFO: Analyzed target //lib/gem:print-version (1 packages loaded, 3 targets configured).
INFO: Found 1 target...
Target //lib/gem:print-version up-to-date:
  bazel-bin/lib/gem/print-version.rb.sh
INFO: Elapsed time: 0.121s, Critical Path: 0.01s
INFO: 4 processes: 4 internal.
INFO: Build completed successfully, 4 total actions
INFO: Build completed successfully, 4 total actions
Version is: 0.1.0
```

You can also run general purpose Ruby scripts that rely on a Ruby interpreter in PATH:

`lib/gem/add.rb`:
```ruby
#!/usr/bin/env ruby

a, b = *ARGV
puts Integer(a) + Integer(b)
```

`lib/gem/BUILD`:
```bazel
load("@rules_ruby//ruby:defs.bzl", "rb_binary", "rb_library")

rb_library(
    name = "add",
    srcs = ["add.rb"],
)

rb_binary(
    name = "add-numbers",
    main = "add.rb",
    deps = [":add"],
)
```

```output
$ bazel run lib/gem:add-numbers 1 2
INFO: Analyzed target //lib/gem:add-numbers (1 packages loaded, 3 targets configured).
INFO: Found 1 target...
Target //lib/gem:add-numbers up-to-date:
  bazel-bin/lib/gem/add-numbers.rb.sh
INFO: Elapsed time: 0.092s, Critical Path: 0.00s
INFO: 1 process: 1 internal.
INFO: Build completed successfully, 1 total action
INFO: Build completed successfully, 1 total action
3
```

You can also run a Ruby binary script available in Gemfile dependencies,
by passing `bin` argument with a path to a Bundler binary stub:

`BUILD`:
```bazel
load("@rules_ruby//ruby:defs.bzl", "rb_binary", "rb_library")

package(default_visibility = ["//:__subpackages__"])

rb_library(
    name = "gem",
    srcs = [
        "Gemfile",
        "Gemfile.lock",
        "gem.gemspec",
    ],
    deps = ["//lib:gem"],
)

rb_binary(
    name = "rubocop",
    args = ["lib"],
    main = "@bundle//:bin/rubocop",
    deps = [
        ":gem",
        "@bundle",
    ],
)
```

```output
$ bazel run :rubocop
INFO: Analyzed target //:rubocop (4 packages loaded, 32 targets configured).
INFO: Found 1 target...
Target //:rubocop up-to-date:
  bazel-bin/rubocop.rb.sh
INFO: Elapsed time: 0.326s, Critical Path: 0.00s
INFO: 2 processes: 2 internal.
INFO: Build completed successfully, 2 total actions
INFO: Build completed successfully, 2 total actions
Inspecting 4 files
....

4 files inspected, no offenses detected
```
    """,
)
